package com.nagarro.ticketapp.server.controller;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.nagarro.ticketapp.server.exceptions.ApiRequestException;
import com.nagarro.ticketapp.server.model.User;
import com.nagarro.ticketapp.server.model.UserTicket;
import com.nagarro.ticketapp.server.repository.UserRepo;
import com.nagarro.ticketapp.server.repository.UserTicketRepo;
import com.nagarro.ticketapp.server.util.AuthenticationResponse;
import com.nagarro.ticketapp.server.util.JwtUtil;
import com.nagarro.ticketapp.server.util.RandomPasswordGenerator;
import com.nagarro.ticketapp.server.util.TicketResponseGenerator;

@CrossOrigin(origins = "*", allowedHeaders = "*")
@RestController
public class ServerController {

	@Autowired
	UserRepo userRepo;
	@Autowired
	UserTicketRepo ticketRepo;
	@Autowired
	JwtUtil jwtUtil;

	RestTemplate rest = new RestTemplate();

//	@PostMapping(value = "/demo", produces = "application/json")
//	public Object test() {
//		SendCredentials.sendMail();
//		return null;
//	}
//	@PostMapping(value = "/demo", produces = { "application/json" })
//	public JsonArray test() {
//		Iterable<User> users = userRepo.findAll();
//		JsonArray res = new JsonArray();
//		for(User user: users) {
//			List<UserTicket> tickets = user.getUserTickets();
//			for(UserTicket ticket: tickets) {
//				res.add(TicketResponseGenerator.test(ticket, user));
//			}
//		}
//		return res;
//	}
	
	@GetMapping(value = "/addadmin", produces = { "application/json" })
	public Object init() {
		User admin = new User();
		admin.setAdd1("India");
		admin.setAdd2("India");
		admin.setAdmin(true);
		admin.setBU("Admin");
		admin.setCity("Gurgaon");
		admin.setCountry("India");
		admin.setEmail("admin@nagarro.com");
		admin.setfName("Admin");
		admin.setlName("Nagarro");
		admin.setPwd("Admin1@3");
		admin.setState("Harayana");
		admin.setTel("9876543210");
		admin.setTitle("Admin");
		admin.setZip(122006);
		return userRepo.save(admin);
	}
	
	@PostMapping(value = "/register", produces = { "application/json" })
	public Object register(@RequestBody Map<String, String> params) {
		User user = new User();
		if (userRepo.existsById(params.get("email")))
			throw new ApiRequestException("Email alredy exists");
		user.setAdmin(false);
		user.setfName(params.get("firstName"));
		user.setlName(params.get("lastName"));
		user.setBU(params.get("BU"));
		user.setTitle(params.get("title"));
		user.setEmail(params.get("email"));
		user.setTel(params.get("tel"));
		user.setAdd1(params.get("address1"));
		user.setAdd2(params.get("address2"));
		user.setCity(params.get("city"));
		user.setState(params.get("state"));
		user.setCountry(params.get("country"));
		user.setZip(Long.parseLong(params.get("zip")));
		user.setPwd(RandomPasswordGenerator.generatePassword(8));
		// SendCredentials.sendMail();
		return userRepo.save(user);
	}

	@PostMapping(value = "/authenticate", produces = { "application/json" })
	public Object auth(@RequestBody Map<String, String> params) {
		User user = userRepo.findById(params.get("userName")).orElse(null);
		if (user == null)
			throw new ApiRequestException("No user found");
		else {
			final String jwt = jwtUtil.generateToken(user);
			return ResponseEntity.ok(new AuthenticationResponse(jwt));
		}
	}

	@PostMapping(value = "/addticket", produces = { "application/json" })
	public JsonObject addTicket(@RequestHeader Map<String, String> headers, @RequestBody Map<String, String> params) {
		try {
			String jwt = headers.get("authorization").substring(7);
			String id = headers.get("id");
			if (!jwtUtil.validateToken(jwt, id))
				throw new ApiRequestException("Unauthorized user");
			UserTicket ticket = new UserTicket();
			ticket.setApprover(params.get("approver"));
			if (Integer.parseInt(params.get("cost_limit")) == 1)
				ticket.setLimit(params.get("limit"));
			else
				ticket.setLimit("");
			ticket.setBearer(Integer.parseInt(params.get("bearer")));
			ticket.setType(params.get("type"));
			ticket.setPriority(Integer.parseInt(params.get("priority")));
			ticket.setDest(params.get("dest"));
			ticket.setSrc(params.get("src"));
			ticket.setStartDate(params.get("start_date"));
			ticket.setEndDate(params.get("end_date"));
			ticket.setProject(params.get("project"));
			ticket.setPassport(params.get("passport"));
			if (params.get("duration") != "")
				ticket.setDuration(Integer.parseInt(params.get("duration")));
			else
				ticket.setDuration(-1);
			ticket.setDetails(params.get("details"));
			ticket.setStatus(0);
			ticket.setProcessing(false);
			User user = userRepo.findById(id).orElse(null);
			user.setUserTickets(ticket);
			UserTicket cnfTicket = ticketRepo.save(ticket);
			JsonObject res = TicketResponseGenerator.generate(cnfTicket, id);
			return res;
		} catch (Exception e) {
			throw new ApiRequestException(e.getMessage());
		}
	}

	@PostMapping(value = "/getticket", produces = { "application/json" })
	public JsonArray get(@RequestHeader Map<String, String> headers) {
		try {
			String jwt = headers.get("authorization").substring(7);
			String id = headers.get("id");
			if (!jwtUtil.validateToken(jwt, id))
				throw new ApiRequestException("Unauthorized user");
			User user = new User();
			user = userRepo.findById(id).orElse(null);
			List<UserTicket> tickets = user.getUserTickets();
			JsonArray res = new JsonArray();
			for(UserTicket ticket: tickets) {
				res.add(TicketResponseGenerator.generate(ticket, id));
			}
			return res;
		} catch (Exception e) {
			throw new ApiRequestException(e.getMessage());
		}
	}
	
	@PostMapping(value = "/getticketadmin", produces = { "application/json" })
	public JsonArray getall(@RequestHeader Map<String, String> headers) {
		try {
			String jwt = headers.get("authorization").substring(7);
			String id = headers.get("id");
			if (!jwtUtil.validateToken(jwt, id))
				throw new ApiRequestException("Unauthorized user");
			Iterable<User> users = userRepo.findAll();
			JsonArray res = new JsonArray();
			for(User user: users) {
				List<UserTicket> tickets = user.getUserTickets();
				for(UserTicket ticket: tickets) {
					res.add(TicketResponseGenerator.generateForAdmin(ticket, user));
				}
			}
			return res;
		}catch (Exception e) {
			throw new ApiRequestException(e.getMessage());
		}
	}
	
	@PatchMapping(value = "/updateticket", produces = { "application/json"} )
	public Object update(@RequestHeader Map<String, String> headers, @RequestBody Map<String, String> params) {
		try {
			String jwt = headers.get("authorization").substring(7);
			String id = headers.get("id");
			if (!jwtUtil.validateToken(jwt, id))
				throw new ApiRequestException("Unauthorized user");
			int ticket_id = Integer.parseInt(params.get("id"));
			int status = Integer.parseInt(params.get("status"));
			System.out.println(Boolean.getBoolean(params.get("isProcessing")));
			boolean isProcessing = false;
			if(params.get("isProcessing") == "true")
				isProcessing = true;
			//UserTicket ticket = ticketRepo.findById(ticket_id).orElse(null);
			//ticket.setStatus(status);
//			System.out.println("Ticket id: " + params.get("id"));
//			System.out.println("Ticket status: " + params.get("status"));
//			System.out.println("Ticket isProcessing: " + params.get("isProcessing"));
			return "Values Received";
		}catch (Exception e) {
			throw new ApiRequestException(e.getMessage());
		}
		
	}
}
